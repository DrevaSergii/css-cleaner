"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const fs_extra_1=__importDefault(require("fs-extra")),path_1=__importDefault(require("path"));class default_1{isCss(e){return".css"===path_1.default.extname(e)}getResolvedCssRoute(e){return this.isCss(e)?path_1.default.resolve(e):null}resolveReducer(e,t){return t.reduce((t,s)=>{const r=path_1.default.join(e,s),a=this.getResolvedCssRoute(r);return a&&t.push(a),t},[])}getResolvedCssRoutes(e,t){const s=this.resolveReducer(e,t);return s.length?s:null}getReadablePromises(e){return e.map(e=>fs_extra_1.default.readFile(e,{encoding:"utf8"}))}async getDocument(e){const t=this.getResolvedCssRoute(e);if(t){return[{route:t,style:await fs_extra_1.default.readFile(t,{encoding:"utf8"})}]}throw new TypeError(`File does\`t have '.css' extension ${e}`)}async getDocuments(e){const t=await fs_extra_1.default.readdir(e),s=this.getResolvedCssRoutes(e,t);if(Array.isArray(s)&&s.length){const e=this.getReadablePromises(s);return(await Promise.all(e)).map((e,t)=>({route:s[t],style:e}))}throw new TypeError(`File with '.css' extension not found in directory ${e}`)}async read(e){const t=path_1.default.resolve(e),s=await fs_extra_1.default.pathExists(t)&&await fs_extra_1.default.stat(t);if(s&&s.isFile())return this.getDocument(t);if(s&&s.isDirectory())return this.getDocuments(t);throw new TypeError(`No such file or directory ${t}`)}}exports.default=default_1;